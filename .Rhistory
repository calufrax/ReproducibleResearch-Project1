x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
plot(x,y)
influence(lm(y~x))
x
dfbeta(lm(y~x))
dfbetas(lm(y~x))
library(MASS)
?shuttle
head(shuttle)
model1<-glm(auto~wind,data="shuttle",family="binomial")
model1<-glm(auto~wind,data=shuttle,family="binomial")
model1<-glm(use~wind,data=shuttle,family="binomial")
model1
shuttle
model$windtail
model1$windtail
model1$coeff
head(shuttle)
summary(model)$coeff
summary(model1)$coeff
-0.0318/1+0.0318
-0.0318/(1+0.0318)
model2<-glm(use~wind+magn,data=shuttle,family="binomial")
summary(model2)$coeff
-0.0320087/(1+0.0320087)
model3<-glm((1-use)~wind,data="shuttle",family="binomial")
data(InsectSprays)
summary(InsectSprays)
head(InsectSprays)
model4<-glm(count~spray,data=InsectSprays,family="poisson")
model4
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x,y)
install.package("caret")
install.packages("caret")
install.packages("caret", dependencies = c("Depends", "Suggests"))
install.packages("ISLR")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
library(AppliedPredictiveModelling)
install.packages("AppliedPredictiveModeling")
data(AlzheimerDisease)
?createDataPartition
data(concrete)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(concrete)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(adData)
?preProcess
t <- adData[,grepl("^IL", names(adData))]
head(t)
u<-preProcess(t,method="PCA",thresh=0.9)
u<-preProcess(t,method="pca",thresh=0.9)
head u
head(u)
u
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
t <- adData[,grepl("^IL", names(adData))]
u<-preProcess(t)
v<-preProcess(t,method="pca",thresh=0.8)
?train
u1<-train(u,method="glm")
?train
u1<-train(u,training,method="glm")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
fit1<-train(y~.,data=vowel.train,method="rf")
library(caret)
fit1<-train(y~.,data=vowel.train,method="rf")
fit1<-train(y~.,data=vowel.train,method="glm")
fit2<-train(y~.,data=vowel.train,method="rf")
accuracy(fit1)
fit1
fit2
predict(pml.test,fit2)
predict(vowel.test,fit2)
predict(vowel.test,fit2,method="rf")
predict(fit2,vowel.test)
predrf<-predict(fit2,vowel.test)
predglm<-predict(fit1,vowel.test)
predrf
?accuracy
??accuracy
summary(fit1)
summary(fit2)
confusionmatrix(fit2,data=vowel.train)
confusionMatrix(fit2,data=vowel.train)
confusionMatrix(data=vowel.train,fit2)
head(fit2)
head(fit1)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
file1<-download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv ")
?download.file
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv ",file1)
library(swirl)
swirl()
install("Swirl")
library("swirl")
swirl
swirl()
mydf <- read.csv(path2csv,stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran,-time)
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran,package=="swirl")
filter(cran,r_version=="3.1.1", country=="US")
?Comparison
filter(cran,r_version<="3.0.2", country=="IN")
filter(cran, country=="IN"|country=="IN")
filter(cran, country=="IN"|country=="US")
filter(cran,size>100500,r_os=="linux-gnu")
is.na(c(3,4,NA,10))
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.na(r_version))
cran2<-select(cran,size:ip_id)
arrange(cran2,ip_id)
desc(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2,package,ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3<-select(cran,ip_id,package,size)
cran3
mutate(cran3,size_mb=size/2^20)
mutate(cran3,size_gb=size_mb/2^10)
mutate(cran3,size_mb=size/2^20,size_gb=size_mb/2^10)
mutate(cran3,correct_size=size-1000)
mutate(cran3,correct_size=size+1000)
summarize(cran,avg_bytes=mean(size))
library(dplyr)
install.packages("tidyr")
install.packages("lubridate")
library("tidyr")
library("lubridate")
library("swirl")
swirl()
library(dplyr)
?tbl_df()
tbl_df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package<-group_by(cran,package)
by_package
summarize(mean(by_package))
summarize(by_package)
summarize(by_package,mean(size))
count<-n(by_package)
count=n()
quite
quit
quite
quit
library(swirl)
swirl()
swirl()
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
this_day<-today()
this_day
year(this_day)
wday(this_day)
wday(this_day,label=TRUE)
this_moment<-now()
this_moment
month(this_moment)
minute(this_moment)
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("--192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours=8,minutes=34,seconds=55)
this_moment
this_moment<-update(this_moment, minutes=28, seconds=0)
this_moment<-update(this_moment, hours = 19, minutes=28, seconds=0)
this_moment
nyc<-now(America/New_York)
nyc<-now("America/New_York")
nyc
depart<-nyc+days(2)
depart
depart<-update(depart,hours=17,minutes=34)
depart
arrive<-depart+hours(15)+minutes(50)
?with_tz
arrive<-with_tz(arrive,tzone="Asia/Hong_Kong")
arrive
last_time<-myd("June 17,2008",tz="Singapore")
last_time<-mdy("June 17, 2008",tz="Singapore")
last_time
?new_interval
how_long<-new_interval(last_time,arrive)
as.period(how_long)
stopwatch()
0
quit
qui*()
quit*()
quit()
swirl()
library(swirl)
swirl()
?n
?n_distinct
submit()
pack_sum
quantile(pack_sum$count, probs=0.99)
?filter
top_counts(pack_sum,count>679)
top_counts<-(pack_sum,count>679)
top_counts<-filter(pack_sum,count>679)
top_counts
View(top_counts)
?arrange
desc(top_counts$count)
arrange(top_counts,desc(count))
arrange(top_counts, desc(count))
arrange(top_counts, desc(count))
top_counts_sorted<-arrange(top_counts, desc(count))
view(top_counts_sorted)
View(top_counts_sorted)
quantile(pack_sum$unique,probs=0.99)
top_unique<-filter(pack_sum,unique>465)
View(top_unique)
top_unique_sorted<-arrange(pack_sum,desc(unique))
top_unique_sorted<-arrange(top_unique,desc(unique))
View()
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
?select
submit()
?mutate
submit()
submit()
submit()
submit()
submit()
?filter
submit()
?arrange
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
res<-gather(students2,sex_class,count)
red<-gather(students2,sex_class,count,-grade)
res<-gather(students2,sex_class,count,-grade)
res
?separate()
?separate
separate(res,sex_class,c("sex","class"))
submit()
submit()
students3
submit()
submit()
?spread
submit()
submit()
submit()
submit()
submit()
extract_numeric("class5")
submit()
?mutate
submit()
submit()
submit()
submit()
submit()
submit()
submit()
students4
submit()
?unique
submit()
submit()
passed
failed
?mutate
mutate(passed,status="passed")
passed<-passed %>% mutate(status="passed")
View(passed)
View(passed)
failed <- failed %>% mutate(status="failed")
?bind_rows
bind_rows(passed,failed)
sat
submit()
submit()
?contains
submit()
submit()
submit()
submit()
library(markdown)
library(knitr)
library(slidify)
install.packages(slidify)
install.packages("slidify")
setwd("R")
dir()
setwd("Repo")
dir()
activity<-read.csv("activity.csv")
view(activity)
View(activity)
View(activity)
unique(activity)[2]
unique(activity)[,2]
data1<-activity[!is.na(activity[,1])]
data1<-activity[!is.na(activity$steps)]
data1<-activity[!is.na(activity$steps),]
View(data1)
View(data1)
labels(data1)
labels(data1[2])
labels(data1)[2]
unique(data1$date)
data2<-by(activity,date,sum)
data2<-by(activity,date,SUM)
data2<-by(activity,activity$date,sum)
data2<-by(activity,activity$date,sum(steps))
data2<-by(activity,activity$date,sum(activity$steps))
data2<-by(activity,activity$date,function(x) x<-sum(activity$steps))
data2
data2<-by(activity,activity$date,function(x) x<-sum(activity$steps,na.rm=TRUE))
data2
data2<-by(activity,activity$date,function(x) x<-sum(activity,na.rm=TRUE))
data2<-by(activity,activity$date,function(x) x<-sum(activity$steps,na.rm=TRUE))
data2<-by(activity$steps,date,sum)
data2<-by(activity$steps,activity$date,sum)
data2
data2<-by(activity$steps,activity$date,sum(na.rm=TRUE))
data2<-by(activity$steps,activity$date,sum,na.rm=TRUE)
?hist
hist(activity$steps, activity$date)
hist(activity$steps)
?plot
plot(activity$date,activity$steps)
?xyplot
?bar
?barplot
dataMean<-by(activity$steps,activity$date,mean,na.rm=TRUE)
hist(dataMean)
?median
dataMedian<-by(activity$steps,activity$date,median,na.rm=TRUE)
dataMedian
?by
hist(data2)
hist(dataTotal,xlab="# of steps/day",main="Histogram of steps/day")
dataTotal<-by(activity$steps,activity$date,sum,na.rm=TRUE)
hist(dataTotal,xlab="# of steps/day",main="Histogram of steps/day")
hist(dataTotal,xlab="# of steps/day",main="Histogram of steps/day", breaks=10)
hist(dataTotal,xlab="# of steps/day",main="Histogram of steps/day", breaks=20)
hist(dataTotal,xlab="# of steps/day",main="Histogram of steps/day", breaks=22)
hist(dataTotal,xlab="# of steps/day",main="Histogram of steps/day", breaks=25)
hist(dataTotal,xlab="# of steps/day",main="Histogram of steps/day", breaks=20)
hist(dataTotal,xlab="# of steps/day",main="Histogram of steps/day", breaks=25)
hist(dataTotal,xlab="# of steps/day",main="Histogram of steps/day", xlim=25000, breaks=25)
xyplot(dataMean)
?xyplot
?plot
plot(dataMean)
plot(dataMean,type="l")
dataMean
dataMean[is.na(dataMean)]<-0
dataMedian[is.na(dataMean)]<-0
plot(dataMean,type="l")
dataMedian<-by(activity$steps,activity$date,median,na.rm=TRUE)
dataMedian[is.na(dataMedian)]<-0
plot(dataMedian,type="l")
reducedSet<-activity[activity$steps>0,]
reducedSet
reducedSet<-activity[!is.na(reducedSet$Steps),]
reducedSet<-activity[!is.na(activity$Steps),]
reducedSet<-activity[!is.na(activity$steps),]
reducedSet<-reducedSet[reducedSet$steps>0,]
plot(reducedSet$steps)
plot(reducedSet$steps, type="l")
reducedMedian<-by(reducedSet$steps,reducedSet$date,median,na.rm=TRUE)
plot(reducedMedian)
plot(reducedMedian,type="l")
plot(dataMean,xlab="Time",ylab="Avg number of steps", main="Average number of steps")
plot(dataMean,xlab="Time",ylab="Avg number of steps", main="Average number of steps", type = "l")
maxSteps <- max(activity$steps)
maxSteps <- max(!is.na(activity$steps))
maxSteps
maxSteps <- max(dataMean)
maxSteps <- round(max(dataMean),2)
maxSteps <- max(activity$steps)
maxSteps <- max(!is.na(activity$steps))
activity$steps
class(activity$steps)
noNAsteps<-!is.na(activity$steps)
noNAsteps<-activity[!is.na(activity$steps),]
View(noNAsteps)
View(noNAsteps)
maxSteps <- max(noNAsteps)
maxSteps <- max(noNAsteps$steps)
maxSteps
activity[activity$steps==maxSteps]
activity[activity$steps==maxSteps,]
activity[activity[1,]==maxSteps,]
activity[activity$steps==maxSteps,]
!is.na(activity[activity$steps==maxSteps,])
activity(!is.na(activity[activity$steps==maxSteps,]))
activity[!is.na(activity[activity$steps==maxSteps,])),]
activity[!is.na(activity[activity$steps==maxSteps,]),]
activity[activity$steps==maxSteps,]
View(activity)
View(activity)
reducedActivity<-activity[!is.na(activity$steps),2]
reducedActivity<-activity[!is.na(activity$steps),]
View(reducedActivity)
View(reducedActivity)
reducedActivity[reducedActivity$steps==maxSteps,]
maxDetails<-reducedActivity[reducedActivity$steps==maxSteps,]
maxDetails
maxDetails$date
maxDetails[2]
maxDate <- maxDetails[2]
maxDate
size(maxDate)
maxDetails$date
reducedActivity<-activity[!is.na(activity$steps),]
maxSteps <- max(reducedActivity$steps)
?plot
plot(reducedMedian,xlab="Day",ylab="number of steps", main="Median number of steps", type = "l"))
plot(reducedMedian,xlab="Day",ylab="number of steps", main="Median number of steps", type = "l")
missingVals<-activity[is.na(activity),]
missingvals
missingVals
head(missingVals)
size(missingVals)
dim(missingVals[,1])
dim(missingVals)
dim(missingVals)[1]
View(activity)
View(activity)
dateMean
dataMean
?apply
activityFilled<-activity
activity[date=="2012-11-26"]
dataMean[date=="2012-11-26"]
dataMean["2012-11-26"]
activityFilled <- apply(activity,2, function(x){if (is.na(x$steps)){x$steps=dataMean[x$date]}})
activityFilled <- apply(activity,2, function(x){if (is.na(x$steps)){x$steps<-dataMean[x$date]}})
